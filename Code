library (jsonlite)
library(rvest)
library(ggplot2)

# Load COPD datasets from the COPDGene website
  # 1. Demographic
  demographics <- read.csv("https://raw.githubusercontent.com/khasenst/datasets_teaching/refs/heads/main/copd_data_demographics.csv")
  
  # 2. Medical images (turn into data frame)
  imaging <- as.data.frame(fromJSON("https://raw.githubusercontent.com/khasenst/datasets_teaching/refs/heads/main/copd_data_imaging.json"))
  
  # 3. Load the COPDGene spirometry dataset as a data frame
  html <- read_html("https://raw.githubusercontent.com/khasenst/datasets_teaching/refs/heads/main/copd_data_spirometry.html")
  spirometry <- data.frame(html_table(html)[[1]])

# Merge datasets
    merged_data <- merge(demographics, imaging,
                        all = TRUE)
    merged_data <- merge(merged_data, spirometry,
                        all = TRUE)

# Convert the variables gender, race, and smoking_status to factors. Reassign the levels as well. 
    merged_data$gender <- as.factor(merged_data$gender)
    merged_data$race <- as.factor(merged_data$race)
    merged_data$smoking_status <- as.factor(merged_data$smoking_status)
    levels(merged_data$gender) <- c("Male", "Female")
    levels(merged_data$race) <- c("White", "Black or African American")
    levels(merged_data$smoking_status) = c("Former smoker", "Current smoker")

# Convert height from centimeters to inches and weight from kilograms to pounds. 
    merged_data$height_in <- merged_data$height_cm * (0.393701)
    merged_data$weight_lb <- merged_data$weight_kg * (2.20462)

# Use text processing to convert the respiratory variable into specific categories: hay fever, asthma, bronchitis attacks, chronic bronchitis, pneumonia, emphysema, COPD, and sleep apnea.
    merged_data$hay_fever <- ifelse(grepl("hay_fever", merged_data$respiratory), "Yes", "No")
    merged_data$asthma <- ifelse(grepl("asthma", merged_data$respiratory), "Yes", "No")
    merged_data$bronchitis_attacks <- ifelse(grepl("bronchitis_attacks", merged_data$respiratory), "Yes", "No")
    merged_data$chronic_bronchitis <- ifelse(grepl("chronic_bronchitis", merged_data$respiratory), "Yes", "No")
    merged_data$pneumonia <- ifelse(grepl("pneumonia", merged_data$respiratory), "Yes", "No")
    merged_data$emphysema <- ifelse(grepl("emphysema", merged_data$respiratory), "Yes", "No")
    merged_data$copd <- ifelse(grepl("copd", merged_data$respiratory), "Yes", "No")
    merged_data$sleep_apnea <- ifelse(grepl("sleep_apnea", merged_data$respiratory), "Yes", "No")

# Convert the new variables into factors.
    merged_data$hay_fever <- factor(merged_data$hay_fever)
    levels(merged_data$hay_fever) <- c("Yes", "No")
    
    merged_data$asthma <- factor(merged_data$asthma)
    levels(merged_data$asthma) <- c("Yes", "No")
    
    merged_data$bronchitis_attacks <- factor(merged_data$bronchitis_attacks)
    levels(merged_data$bronchitis_attacks) <- c("Yes", "No")
    
    merged_data$chronic_bronchitis <- factor(merged_data$chronic_bronchitis)
    levels(merged_data$chronic_bronchitis) <- c("Yes", "No")
    
    merged_data$pneumonia <- factor(merged_data$pneumonia)
    levels(merged_data$pneumonia) <- c("Yes", "No")
    
    merged_data$emphysema <- factor(merged_data$emphysema)
    levels(merged_data$emphysema) <- c("Yes", "No")
    
    merged_data$copd <- factor(merged_data$copd)
    levels(merged_data$copd) <- c("Yes", "No")
    
    merged_data$sleep_apnea <- factor(merged_data$sleep_apnea)
    levels(merged_data$sleep_apnea) <- c("Yes", "No")

# Clean the data by removing the former height, weight and respiratory columns. These categories will no longer be needed because of the newly processed ones in the dataset.
    merged_data <- merged_data[, -merged_data$height_cm]
    merged_data <- merged_data[, -merged_data$weight_kg]
    merged_data <- merged_data[, !(names(merged_data) == "respiratory")]

# Export the data frame as a .csv file.
    write.csv(merged_data, "copd_data.csv", row.names = TRUE)

# Variable input function: This function takes a single variable/column from the data frame as the input. 
# Returns both the mean and standard deviation for numeric variables and the frequency count for character and factor variables.
    variable_input <- function(variable) {
      if (is.numeric(variable) || is.integer(variable)) {
          return (c(mean(variable), sd(variable)))
      }
      if (is.character(variable) || is.factor(variable)) {
          return(table(variable))
      }
    }

# Apply the input function to the entire data frame to find any observations with NA values. Remove those rows and reapply the input function again. 
    sapply(merged_data, variable_input)
    merged_data <- na.omit(merged_data)  
    sapply(merged_data, variable_input)

# Use GGPLOT to plot histograms for each numeric / integer variables in the data frame. Take note of any variables that look skewed and transform them. 
    for (i in (merged_data)){
      if(is.numeric(i) || is.integer(i)) {
        print(ggplot(data = merged_data, aes(x = log(i))) +
          geom_histogram())
      }
    }

# GGPLOT used for boxplots to visualize the relationship between the breathing function of the clinical trial participants after five years (fev1_phase2) and other categories in the data frame. (Gender, race, smoking status, emphysema, asthma)
    # Gender
    ggplot(merged_data, aes(x = factor(merged_data$gender), y = merged_data$fev1_phase2)) +
      geom_boxplot() +
      geom_jitter(width = 0.05, alpha = 0.5) +
        labs(title = "Relationship between Patients with Fever 1 Phase 2 and Gender",
              x = "Gender",
              y = "Fever 1 Phase 2: Volume of Air Exhaled in One Second (Liters)")
    
    # Race
    ggplot(merged_data, aes(x = factor(merged_data$race), y = merged_data$fev1_phase2)) +
      geom_boxplot() +
      geom_jitter(width = 0.05, alpha = 0.5) +
        labs(title = "Relationship between Patients with Fever 1 Phase 2 and Race",
              x = "Race",
              y = "Fever 1 Phase 2: Volume of Air Exhaled in One Second (Liters)")
    
    # Smoking Status
    ggplot(merged_data, aes(x = factor(merged_data$smoking_status), y = merged_data$fev1_phase2)) +
      geom_boxplot() +
      geom_jitter(width = 0.05, alpha = 0.5) +
        labs(title = "Relationship between Patients with Fever 1 Phase 2 and Smoking Status",
              x = "Smoking Status",
              y = "Fever 1 Phase 2: Volume of Air Exhaled in One Second (Liters)")
    
    # Emphysema
    ggplot(merged_data, aes(x = factor(merged_data$emphysema), y = merged_data$fev1_phase2)) +
      geom_boxplot() +
      geom_jitter(width = 0.05, alpha = 0.5) +
        labs(title = "Relationship between Patients with Fever 1 Phase 2 and Emphysema",
              x = "Emphysema",
              y = "Fever 1 Phase 2: Volume of Air Exhaled in One Second (Liters)")
    
    # Asthma
    ggplot(merged_data, aes(x = factor(merged_data$asthma), y = merged_data$fev1_phase2)) +
      geom_boxplot() +
      geom_jitter(width = 0.05, alpha = 0.5) +
        labs(title = "Relationship between Patients with Fever 1 Phase 2 and Asthma",
              x = "Asthma",
              y = "Fever 1 Phase 2: Volume of Air Exhaled in One Second (Liters)")

# GGPLOT used for scatterplots that visualize the relationship between fev1_phase2 and numeric variables: height, weight, heart rate, BMI, and age. 
# Gender variable is used as an additional color dimension. 
    # Height, positive linear relationship
    ggplot(merged_data, aes(x = merged_data$height_in, y = merged_data$fev1_phase2, color = merged_data$smoking_status)) +
      geom_point() +
      labs(title = "Relationship between Fever 1 Phase 2 and Height",
           x = "Height (inches)",
           y = "Fever 1 Phase 2: Volume of Air Exhaled in One Second (liters)",
           color = "Gender")
    
    # Weight, no linear relationship
    ggplot(merged_data, aes(x = merged_data$weight_lb, y = merged_data$fev1_phase2, color = merged_data$smoking_status)) +
      geom_point() +
      labs(title = "Relationship between Fever 1 Phase 2 and Weight",
           x = "Weight (lbs)",
           y = "Fever 1 Phase 2: Volume of Air Exhaled in One Second (liters)",
           color = "Gender")
    
    # Heart Rate, no linear relationship
    ggplot(merged_data, aes(x = merged_data$heart_rate, y = merged_data$fev1_phase2, color = merged_data$smoking_status)) +
      geom_point() +
      labs(title = "Relationship between Fever 1 Phase 2 and Heart Rate",
           x = "Heart Rate",
           y = "Fever 1 Phase 2: Volume of Air Exhaled in One Second (liters)",
           color = "Gender")
    
    # Body Mass Index, no linear relationship
    ggplot(merged_data, aes(x = merged_data$bmi, y = merged_data$fev1_phase2, color = merged_data$smoking_status)) +
      geom_point() +
      labs(title = "Relationship between Fever 1 Phase 2 and BMI",
           x = "BMI",
           y = "Fever 1 Phase 2: Volume of Air Exhaled in One Second (liters)",
           color = "Gender")
    
    # Age, negative linear relationship but minimal
    ggplot(merged_data, aes(x = merged_data$visit_age, y = merged_data$fev1_phase2, color = merged_data$smoking_status)) +
      geom_point() +
      labs(title = "Relationship between Fever 1 Phase 2 and Age",
           x = "Age (years)",
           y = "Fever 1 Phase 2: Volume of Air Exhaled in One Second (liters)",
           color = "Gender")

# A statistical test is conducted to analyze if there are significant differences in fev1_phase2 between the categories that were previously used. 
    # Gender
    males <- merged_data[merged_data$gender == "Male", ]
    females <- merged_data[merged_data$gender == "Female", ]
    boot_male <- vector(length = 1000)
    boot_female <- vector(length = 1000)
    gender_mean_diff <- vector(length = 1000)
    
    for (i in 1:1000) {
      # sample for males
      sample_male <- sample(males$fev1_phase2, size = 1000, replace = TRUE)
    
      # take mean of male sample
      mean_male <- mean(sample_male)
    
      # store means
      boot_male[i] <- mean(mean_male)
      # ----------
      # sample for females
      sample_female <- sample(females$fev1_phase2, size = 1000, replace = TRUE)
    
      # take mean of female sample
      mean_female <- mean(sample_female)
    
      # store means
      boot_female[i] <- mean(mean_female)
    
      # store difference of means
      gender_mean_diff[i] <- boot_male[i] - boot_female[i]
    }
    print("Confidence Interval for Difference in Fever 1 Phase 2 for Gender")
    print(quantile(gender_mean_diff, probs = c(0.025, 0.975)))
